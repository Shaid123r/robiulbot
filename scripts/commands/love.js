const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");
const jimp = require("jimp");

module.exports.config = {
  name: "love",
  version: "2.0.0",
  permission: 0,
  credits: "robiul", // ‚ö†Ô∏è ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
  description: "Create a love frame with you and the mentioned person",
  prefix: true,
  category: "Love",
  usages: "@mention",
  cooldowns: 5,
};

module.exports.onLoad = async () => {
  const filePath = path.resolve(__dirname, "cache/canvas/crush11115522.png");
  const dirPath = path.resolve(__dirname, "cache/canvas");
  if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true });
  if (!fs.existsSync(filePath)) {
    const { downloadFile } = global.utils;
    await downloadFile("https://i.ibb.co/JMCj67j/crush11115522.jpg", filePath); // <-- ‡¶´‡ßç‡¶∞‡ßá‡¶Æ ‡¶á‡¶Æ‡ßá‡¶ú URL ‡¶¶‡¶ø‡¶®
  }
};

async function circle(imagePath) {
  const img = await jimp.read(imagePath);
  img.circle();
  return await img.getBufferAsync("image/png");
}

async function makeImage({ one, two }) {
  const canvasPath = path.resolve(__dirname, "cache/canvas");
  const bg = await jimp.read(path.join(canvasPath, "crush11115522.png"));
  const p1 = path.join(canvasPath, `avt_${one}.png`);
  const p2 = path.join(canvasPath, `avt_${two}.png`);
  const final = path.join(canvasPath, `love_${one}_${two}.png`);

  const avt1 = (await axios.get(`https://graph.facebook.com/${one}/picture?width=512&height=512&access_token=6628568379|c1e620fa708a1d5696fb991c1bde5662`, { responseType: "arraybuffer" })).data;
  const avt2 = (await axios.get(`https://graph.facebook.com/${two}/picture?width=512&height=512&access_token=6628568379|c1e620fa708a1d5696fb991c1bde5662`, { responseType: "arraybuffer" })).data;

  fs.writeFileSync(p1, Buffer.from(avt1));
  fs.writeFileSync(p2, Buffer.from(avt2));

  const circle1 = await jimp.read(await circle(p1));
  const circle2 = await jimp.read(await circle(p2));

  bg.composite(circle1.resize(196, 196), 98, 141)
    .composite(circle2.resize(193, 193), 427, 143);

  fs.writeFileSync(final, await bg.getBufferAsync("image/png"));

  fs.unlinkSync(p1);
  fs.unlinkSync(p2);

  return final;
}

module.exports.run = async function ({ api, event }) {
  const { threadID, messageID, senderID, mentions } = event;


  const currentCredit = module.exports.config.credits;
  if (currentCredit !== "robiul") {
    return api.sendMessage("‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ credits ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶¨‡¶≤‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ!", threadID, messageID);
  }

  const mentionIDs = Object.keys(mentions);
  if (!mentionIDs[0]) {
    return api.sendMessage("‚ö†Ô∏è ‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶´‡ßç‡¶∞‡ßá‡¶Æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!", threadID, messageID);
  }

  const targetID = mentionIDs[0];
  try {
    const pathImg = await makeImage({ one: senderID, two: targetID });
    return api.sendMessage({
      body: "‚Ä¢ü¶ãüíõüå∏\n\n‡¶¨‡¶æ‡¶ß‡¶ø‡ßü‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶≤‡¶æ‡¶≠ ‡¶®‡ßá‡¶á\n ‡¶â‡ßú‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡ßã\n‡¶¶‡¶ø‡¶® ‡¶∂‡ßá‡¶∑‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ü‡¶∏‡ßá\n ‡¶§‡¶ñ‡¶®‡¶ø ‡¶Ü‡¶ó‡¶≤‡ßá ‡¶∞‡ßá‡¶ñ‡ßã\n\n‚Ä¢üòòü¶ãüíõ\nùêÇùê´ùêûùêöùê≠ùê®ùê´ ‚îÅ‚û¢ ùêâùê®ùê≤ ùêÄùê°ùê¶ùêûùêù",
      attachment: fs.createReadStream(pathImg)
    }, threadID, () => fs.unlinkSync(pathImg), messageID);
  } catch (err) {
    console.log(err);
    return api.sendMessage("‚ùå ‡¶´‡ßç‡¶∞‡ßá‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
  }
};